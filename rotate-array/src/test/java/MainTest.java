/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Test;
import static org.junit.Assert.*;

public class MainTest {
    @Test public void testEmptyAndNoRotation() {
        int[] testArray = new int[]{1, 2, 3, 4, 5};
        int[] testEmpty = new int[0];
        int[] testOneInd = new int[1];
        Main classUnderTest = new Main();

        /* Tests for Empty Arrays, Arrays of length 1, and Zero Rotation */
        assertArrayEquals("Should return array if rotation is 0", testArray, classUnderTest.rotateArray(testArray, 0));
        assertArrayEquals("Should return array if array is empty", testEmpty, classUnderTest.rotateArray(testEmpty, 1));
        assertArrayEquals("Should return array if array is empty", testOneInd, classUnderTest.rotateArray(testOneInd, 1));
    }

    @Test public void testLeftRotation() {
        int[] testArray = new int[]{1, 2, 3, 4, 5};
        int[] testEmpty = new int[0];
        int[] testOneInd = new int[1];
        Main classUnderTest = new Main();

        /* Tests for rotation backward using negative numbers */
        assertEquals("Should rotate the indexes 2 to the left placing 3 at index 0 instead of index 2", 3, classUnderTest.rotateArray(testArray, -2)[0]);
        assertEquals("Should rotate the indexes 2 to the left placing 5 at index 2 instead of index 4", 5, classUnderTest.rotateArray(testArray, -2)[2]);
    }

    @Test public void testLeftRotationGreaterThanFull() {
        int[] testArray = new int[]{1, 2, 3, 4, 5};
        int[] testEmpty = new int[0];
        int[] testOneInd = new int[1];
        Main classUnderTest = new Main();

        /* Tests for rotation backward using negative numbers greater than array length after absolute */
        assertEquals("Should rotate the indexes 7 to the left placing 3 at index 0 instead of index 2", 3, classUnderTest.rotateArray(testArray, -7)[0]);
        assertEquals("Should rotate the indexes 7 to the left placing 5 at index 2 instead of index 4", 5, classUnderTest.rotateArray(testArray, -7)[2]);
    }

    @Test public void testRightRotation() {
        int[] testArray = new int[]{1, 2, 3, 4, 5};
        int[] testEmpty = new int[0];
        int[] testOneInd = new int[1];
        Main classUnderTest = new Main();

        /* Tests for rotation forward */
        assertEquals("Should rotate the indexes 2 to the right placing 3 at index 4 instead of index 2", 3, classUnderTest.rotateArray(testArray, 2)[4]);
        assertEquals("Should rotate the indexes 2 to the right placing 5 at index 1 instead of index 4", 5, classUnderTest.rotateArray(testArray, 2)[1]);
    }

    @Test public void testRightRotationGreaterThanFull() {
        int[] testArray = new int[]{1, 2, 3, 4, 5};
        int[] testEmpty = new int[0];
        int[] testOneInd = new int[1];
        Main classUnderTest = new Main();

        /* Tests for rotation forward greater than one full array length */
        assertEquals("Should rotate the indexes 7 to the right placing 3 at index 4 instead of index 2", 3, classUnderTest.rotateArray(testArray, 7)[4]);
        assertEquals("Should rotate the indexes 7 to the right placing 5 at index 1 instead of index 4", 5, classUnderTest.rotateArray(testArray, 7)[1]);
    }
}
